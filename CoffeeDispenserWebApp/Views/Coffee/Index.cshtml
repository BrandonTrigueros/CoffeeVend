@model List<CoffeeDispenserWebApp.Models.ICoffeeModel>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Premium Coffee Dispenser";
}

@Html.AntiForgeryToken()

<!-- Hero Banner Section -->
<div class="hero-banner">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">☕ Premium Coffee Dispenser</h1>
            <p class="hero-subtitle">Experience the perfect blend of technology and taste</p>
            
            <div class="hero-features">
                <div class="hero-feature">
                    <div class="hero-feature-icon">🚀</div>
                    <div class="hero-feature-text">Smart Ordering</div>
                </div>
                <div class="hero-feature">
                    <div class="hero-feature-icon">💰</div>
                    <div class="hero-feature-text">Precise Change</div>
                </div>
                <div class="hero-feature">
                    <div class="hero-feature-icon">⚡</div>
                    <div class="hero-feature-text">Instant Service</div>
                </div>
                <div class="hero-feature">
                    <div class="hero-feature-icon">🎯</div>
                    <div class="hero-feature-text">Quality Assured</div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Main Content Section -->
<div class="container coffee-section">
    <div class="row">
        <!-- Coffee Selection Section -->
        <div class="col-lg-8">
            <h2 class="section-title">Select Your Perfect Coffee</h2>
            <div class="row">
                @foreach (var coffee in Model)
                {
                    <div class="col-md-6 mb-4">
                        <div class="card coffee-card">
                            <img src="@coffee.ImageUrl" class="card-img-top" alt="@coffee.Name" />
                            <div class="card-body">
                                <div class="price-badge">₡@coffee.Price</div>
                                <h5 class="card-title">@coffee.Name</h5>
                                <p class="stock-info">
                                    <i class="fas fa-box"></i> Available: @coffee.Stock units
                                </p>
                                
                                <div class="quantity-controls">
                                    <label class="quantity-label" for="quantity-@coffee.Name">Quantity:</label>
                                    <input type="number" 
                                           class="form-control quantity-input" 
                                           id="quantity-@coffee.Name" 
                                           min="0" 
                                           max="@coffee.Stock" 
                                           value="0" />
                                </div>
                                
                                <button type="button" 
                                        class="btn add-to-order-btn pulse" 
                                        onclick="addToOrder('@coffee.Name', @coffee.Stock, @coffee.Price)">
                                    <i class="fas fa-plus-circle"></i> Add to Order
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Order Summary Panel -->
        <div class="col-lg-4">
            <div class="order-panel">
                <h2><i class="fas fa-shopping-cart"></i> Your Order</h2>
                <div id="order-list">
                    <div class="text-center text-muted">
                        <i class="fas fa-coffee fa-3x mb-3"></i>
                        <p>Your cart is empty<br>Start by selecting a coffee!</p>
                    </div>
                </div>
                <button type="button" 
                        class="btn payment-btn mt-4" 
                        data-bs-toggle="modal" 
                        data-bs-target="#paymentModal">
                    <i class="fas fa-credit-card"></i> Proceed to Payment
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Payment Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1" role="dialog" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="paymentModalLabel">
                    <i class="fas fa-coins"></i> Insert Coins
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="payment-summary">
                    <h4>Total to Pay: <strong class="text-success">₡<span id="totalToPay">0</span></strong></h4>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="mb-3"><i class="fas fa-money-bill-wave"></i> Insert Coins:</h6>
                        
                        <div class="coin-input-group">
                            <div class="coin-value">₡1000</div>
                            <input type="number" class="form-control coin-input" data-value="1000" min="0" value="0" style="width: 80px;" />
                        </div>
                        
                        <div class="coin-input-group">
                            <div class="coin-value">₡500</div>
                            <input type="number" class="form-control coin-input" data-value="500" min="0" value="0" style="width: 80px;" />
                        </div>
                        
                        <div class="coin-input-group">
                            <div class="coin-value">₡100</div>
                            <input type="number" class="form-control coin-input" data-value="100" min="0" value="0" style="width: 80px;" />
                        </div>
                        
                        <div class="coin-input-group">
                            <div class="coin-value">₡50</div>
                            <input type="number" class="form-control coin-input" data-value="50" min="0" value="0" style="width: 80px;" />
                        </div>
                        
                        <div class="coin-input-group">
                            <div class="coin-value">₡25</div>
                            <input type="number" class="form-control coin-input" data-value="25" min="0" value="0" style="width: 80px;" />
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="payment-summary">
                            <h5><i class="fas fa-calculator"></i> Payment Status</h5>
                            <p class="mb-2">Current Payment: <strong class="text-primary">₡<span id="currentPayment">0</span></strong></p>
                            <p class="mb-2">Remaining: <strong class="text-warning">₡<span id="remainingAmount">0</span></strong></p>
                            <div id="paymentStatus" class="mt-3">
                                <span class="badge bg-secondary">Waiting for payment...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success btn-lg" onclick="processOrder()">
                    <i class="fas fa-check-circle"></i> Confirm Payment
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" role="dialog" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">
                    <i class="fas fa-check-circle"></i> Order Successful!
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="reloadPage()"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-4">
                    <i class="fas fa-coffee fa-4x text-success mb-3"></i>
                    <h4>Your order has been confirmed!</h4>
                    <p class="text-muted">Please collect your coffee and change below.</p>
                </div>
                
                <div class="change-info">
                    <h5><i class="fas fa-coins"></i> Your Change:</h5>
                    <ul id="changeList" class="list-unstyled"></ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-lg" data-bs-dismiss="modal" onclick="reloadPage()">
                    <i class="fas fa-thumbs-up"></i> Awesome!
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">
                    <i class="fas fa-exclamation-triangle"></i> Order Failed
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <i class="fas fa-times-circle fa-4x text-danger mb-3"></i>
                <h4>Oops! Something went wrong</h4>
                <p id="errorMessage" class="text-muted">There was an error processing your order.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">
                    <i class="fas fa-redo"></i> Try Again
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<script>
    var currentOrder = {};
    var coffeePrices = {};

    // Enhanced Add Coffee to Order with animations
    function addToOrder(coffeeName, maxStock, price) {
        console.log('addToOrder called for:', coffeeName);
        var quantity = parseInt(document.getElementById('quantity-' + coffeeName).value);
        
        if (quantity > 0 && quantity <= maxStock) {
            currentOrder[coffeeName] = quantity;
            coffeePrices[coffeeName] = price;
            
            // Add success animation
            var button = event.target;
            button.innerHTML = '<i class="fas fa-check"></i> Added!';
            button.classList.remove('pulse');
            button.classList.add('btn-success');
            
            setTimeout(() => {
                button.innerHTML = '<i class="fas fa-plus-circle"></i> Add to Order';
                button.classList.remove('btn-success');
                button.classList.add('pulse');
            }, 1500);
            
            updateOrderList();
            
            // Success notification
            showNotification('success', `${quantity}x ${coffeeName} added to your order!`);
        } else {
            showNotification('error', 'Please enter a valid quantity.');
        }
    }

    // Enhanced Order List Display with better styling
    function updateOrderList() {
        var orderList = document.getElementById('order-list');
        orderList.innerHTML = '';
        var total = 0;
        
        if (Object.keys(currentOrder).length === 0) {
            orderList.innerHTML = `
                <div class="text-center text-muted">
                    <i class="fas fa-coffee fa-3x mb-3"></i>
                    <p>Your cart is empty<br>Start by selecting a coffee!</p>
                </div>
            `;
            return;
        }
        
        var table = document.createElement('table');
        table.className = 'table order-table';
        var thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th><i class="fas fa-coffee"></i> Coffee</th>
                <th><i class="fas fa-sort-numeric-up"></i> Qty</th>
                <th><i class="fas fa-tag"></i> Price</th>
                <th><i class="fas fa-calculator"></i> Total</th>
            </tr>
        `;
        table.appendChild(thead);
        var tbody = document.createElement('tbody');

        for (var coffeeName in currentOrder) {
            var quantity = currentOrder[coffeeName];
            var price = coffeePrices[coffeeName];
            var subtotal = quantity * price;
            total += subtotal;

            var row = document.createElement('tr');
            row.innerHTML = `
                <td><strong>${coffeeName}</strong></td>
                <td><span class="badge bg-primary">${quantity}</span></td>
                <td>₡${price}</td>
                <td><strong>₡${subtotal}</strong></td>
            `;
            tbody.appendChild(row);
        }

        var totalRow = document.createElement('tr');
        totalRow.className = 'total-row';
        totalRow.innerHTML = `
            <td colspan="3"><strong><i class="fas fa-receipt"></i> TOTAL</strong></td>
            <td><strong>₡${total}</strong></td>
        `;
        tbody.appendChild(totalRow);
        table.appendChild(tbody);
        orderList.appendChild(table);

        document.getElementById('totalToPay').innerText = total;
    }

    // Enhanced Payment Processing with real-time feedback
    function processOrder() {
        console.log('processOrder called');
        
        // Collect inserted coins
        var insertedCoins = [];
        $('.coin-input').each(function () {
            var amount = parseInt($(this).val());
            var value = parseInt($(this).data('value'));
            if (amount > 0) {
                insertedCoins.push({ Value: value, Amount: amount });
            }
        });

        // Calculate totals
        var totalInserted = insertedCoins.reduce((sum, coin) => sum + (coin.Value * coin.Amount), 0);
        var totalToPay = parseInt(document.getElementById('totalToPay').innerText);

        console.log('Total Inserted:', totalInserted);
        console.log('Total to Pay:', totalToPay);

        // Validation with enhanced feedback
        if (totalToPay === 0) {
            showNotification('warning', 'Please add at least one coffee to your order.');
            return;
        }

        if (totalInserted < totalToPay) {
            showNotification('error', `Insufficient payment! You need ₡${totalToPay - totalInserted} more.`);
            updatePaymentStatus('insufficient');
            return;
        }

        updatePaymentStatus('processing');

        var orderData = {
            SelectedCoffees: currentOrder,
            InsertedCoins: insertedCoins
        };

        console.log('Order Data:', orderData);

        // Enhanced AJAX with loading state
        $.ajax({
            type: 'POST',
            url: '@Url.Action("ConfirmOrder", "Coffee")',
            data: JSON.stringify(orderData),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            beforeSend: function() {
                $('#paymentModal .btn-success').html('<i class="fas fa-spinner fa-spin"></i> Processing...').prop('disabled', true);
            },
            success: function (response) {
                console.log('AJAX Success:', response);
                $('#paymentModal .btn-success').html('<i class="fas fa-check-circle"></i> Confirm Payment').prop('disabled', false);
                
                if (response.success) {
                    // Enhanced change display
                    var changeList = $('#changeList');
                    changeList.empty();
                    
                    if (response.change.coinsCount.length > 0) {
                        response.change.coinsCount.forEach(function (coin) {
                            changeList.append(`
                                <li class="d-flex justify-content-between align-items-center mb-2">
                                    <span><i class="fas fa-coins text-warning"></i> ₡${coin.value}</span>
                                    <span class="badge bg-success rounded-pill">${coin.amount} coins</span>
                                </li>
                            `);
                        });
                    } else {
                        changeList.append('<li class="text-center"><i class="fas fa-check-circle text-success"></i> No change needed - Exact payment!</li>');
                    }

                    // Hide payment modal and show success
                    var paymentModal = bootstrap.Modal.getInstance(document.getElementById('paymentModal'));
                    if (paymentModal) paymentModal.hide();

                    var successModal = new bootstrap.Modal(document.getElementById('successModal'));
                    successModal.show();
                    
                    showNotification('success', 'Order completed successfully! 🎉');
                } else {
                    $('#errorMessage').text(response.message);
                    var paymentModal = bootstrap.Modal.getInstance(document.getElementById('paymentModal'));
                    if (paymentModal) paymentModal.hide();

                    var errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                    errorModal.show();
                    
                    showNotification('error', response.message);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error('AJAX Error:', textStatus, errorThrown);
                $('#paymentModal .btn-success').html('<i class="fas fa-check-circle"></i> Confirm Payment').prop('disabled', false);
                
                var paymentModal = bootstrap.Modal.getInstance(document.getElementById('paymentModal'));
                if (paymentModal) paymentModal.hide();

                $('#errorMessage').text('An unexpected error occurred while processing your order.');
                var errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                errorModal.show();
                
                showNotification('error', 'Connection error. Please try again.');
            }
        });
    }

    // Enhanced notification system
    function showNotification(type, message) {
        var iconClass = {
            'success': 'fas fa-check-circle',
            'error': 'fas fa-exclamation-triangle',
            'warning': 'fas fa-exclamation-circle',
            'info': 'fas fa-info-circle'
        };
        
        var bgClass = {
            'success': 'alert-success',
            'error': 'alert-danger',
            'warning': 'alert-warning',
            'info': 'alert-info'
        };

        var notification = $(`
            <div class="alert ${bgClass[type]} alert-dismissible fade show position-fixed" 
                 style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                <i class="${iconClass[type]}"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `);

        $('body').append(notification);
        
        setTimeout(() => {
            notification.alert('close');
        }, 5000);
    }

    // Payment status updates
    function updatePaymentStatus(status) {
        var statusElement = $('#paymentStatus');
        var statusHtml = {
            'insufficient': '<span class="badge bg-warning"><i class="fas fa-exclamation-triangle"></i> Insufficient Payment</span>',
            'sufficient': '<span class="badge bg-success"><i class="fas fa-check-circle"></i> Payment Complete</span>',
            'processing': '<span class="badge bg-info"><i class="fas fa-spinner fa-spin"></i> Processing...</span>',
            'waiting': '<span class="badge bg-secondary"><i class="fas fa-clock"></i> Waiting for payment...</span>'
        };
        
        statusElement.html(statusHtml[status] || statusHtml['waiting']);
    }

    // Real-time payment calculation with enhanced feedback
    $(document).ready(function () {
        $('.coin-input').on('input', function () {
            var currentPayment = 0;
            $('.coin-input').each(function () {
                var amount = parseInt($(this).val()) || 0;
                var value = parseInt($(this).data('value'));
                currentPayment += (value * amount);
            });
            
            $('#currentPayment').text(currentPayment);
            
            var totalToPay = parseInt($('#totalToPay').text()) || 0;
            var remaining = Math.max(0, totalToPay - currentPayment);
            $('#remainingAmount').text(remaining);
            
            // Update payment status
            if (totalToPay === 0) {
                updatePaymentStatus('waiting');
            } else if (currentPayment >= totalToPay) {
                updatePaymentStatus('sufficient');
            } else {
                updatePaymentStatus('insufficient');
            }
        });
        
        // Initialize animations
        setTimeout(() => {
            $('.coffee-card').addClass('animate__animated animate__fadeInUp');
        }, 100);
    });

    // Enhanced page reload
    function reloadPage() {
        showNotification('info', 'Thank you for your order! Refreshing...');
        setTimeout(() => {
            location.reload();
        }, 1500);
    }
</script>
